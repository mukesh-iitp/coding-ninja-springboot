package EdTech.Course.service;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import EdTech.Course.dto.CourseDto;
import EdTech.Course.dto.Payment;
import EdTech.Course.model.Course;
import EdTech.Course.model.CourseMaterial;
import EdTech.Course.model.Enrollment;
import EdTech.Course.repository.CourseRepository;
import EdTech.Course.repository.EnrollmentRepository;

@Service
public class CourseService {

	@Autowired
	CourseRepository courseRepository;

	@Autowired
	EnrollmentRepository enrollmentRepository;

	private final RestTemplate restTemplate = new RestTemplate();

	public List<Course> getAllCourses() {
		//		List<Course> courseList = new ArrayList<Course>();
		//		courseList = courseRepository.findAll();
		//		return courseList;
		return courseRepository.findAll();
	}

	public Course getCourseById(Long id) {
		//		return courseRepository.findById(id).get();
		Optional<Course> course = courseRepository.findById(id);
		return course.orElse(null);
	}

	public Course getCourseByName(String name) {
		return courseRepository.findByName(name);
	}

	public List<CourseMaterial> getCourseMaterialByCourseId(Long id) {
		//		List<CourseMaterial> courseMaterialList = new ArrayList<CourseMaterial>();
		//		Course course = getCourseById(id);
		//		courseMaterialList = course.getCourseMaterial();
		//		return courseMaterialList;

		return courseRepository.findById(id).orElseThrow().getCourseMaterial();
	}

	public Course getCourseByInstructor(String instructor) {
		return courseRepository.findByInstructor(instructor);
	}

	public void createCourse(CourseDto courseDto) {
		Course course = new Course();

		//		course.setName(courseDto.getName());
		//		course.setDescription(courseDto.getDescription());
		//		course.setInstructor(courseDto.getInstructor());
		//		course.setAmount(courseDto.getAmount());
		//		courseRepository.save(course);

		course.setAmount(courseDto.getAmount());
		course.setName(courseDto.getName());
		course.setDescription(courseDto.getDescription());
		course.setInstructor(courseDto.getInstructor());
		for(CourseMaterial courseMaterial : courseDto.getCourseMaterial()){
			courseMaterial.setCourse(course);
		}
		for(Enrollment enrollment : courseDto.getEnrollments()){
			enrollment.setCourse(course);
		}
		course.setCourseMaterial(courseDto.getCourseMaterial());
		course.setEnrollment(courseDto.getEnrollments());
		courseRepository.save(course);


	}

	public void updateCourse(Long id, CourseDto updatedCourseDto) {

		//		Course updatedCourse = getCourseById(id);
		//		updatedCourse.setName(updatedCourseDto.getName());
		//		updatedCourse.setDescription(updatedCourseDto.getDescription());
		//		updatedCourse.setInstructor(updatedCourseDto.getInstructor());
		//		updatedCourse.setAmount(updatedCourseDto.getAmount());
		//		courseRepository.save(updatedCourse);	

		Course existingCourse = getCourseById(id);
		if (existingCourse != null) {
			existingCourse.setName(updatedCourseDto.getName());
			existingCourse.setDescription(updatedCourseDto.getDescription());
			existingCourse.setInstructor(updatedCourseDto.getInstructor());
			existingCourse.setAmount(updatedCourseDto.getAmount());
			for(CourseMaterial courseMaterial : updatedCourseDto.getCourseMaterial()){
				courseMaterial.setCourse(existingCourse);
			}
			for(Enrollment enrollment : updatedCourseDto.getEnrollments()){
				enrollment.setCourse(existingCourse);
			}
			courseRepository.save(existingCourse);
		}
		else{
			throw new RuntimeException("Course do not exist");
		}

	}

	public void deleteCourse(Long id) {
		//		Course course = getCourseById(id);
		//		if(course != null)
		courseRepository.deleteById(id);
		//		else
		//			throw new NoSuchElementException();
	}

	public void createEnrollmentForCourse(Long courseId, Long userId) {

		// call to user to find user is available
		String userServiceUrl = "http://localhost:8083/user";
		HttpHeaders header = new HttpHeaders();
		header.set("Authorization", "Bearer {Token generated by user login in User Service}");
		header.setContentType(MediaType.APPLICATION_JSON);
		HttpEntity<String> requestEntity = new HttpEntity<>(null, header);
		ResponseEntity<Object>  response = restTemplate.exchange(userServiceUrl + "/" + userId, HttpMethod.GET,
				requestEntity, Object.class);
		if(response.getBody() == null) throw new RuntimeException("User not found");

		Enrollment enrollment = new Enrollment();
		enrollment.setUserId(userId);
		enrollment.setCourse(courseRepository.findById(courseId).orElseThrow());
		enrollmentRepository.save(enrollment);

		// creating payment
		String paymentServiceUrl = "http://localhost:8082/payment";
		Payment payment = new Payment();
		payment.setCourseId(courseId);
		payment.setUserId(userId);
		payment.setAmount(enrollment.getCourse().getAmount());
		restTemplate.postForObject(paymentServiceUrl, payment, Payment.class);
	}


}
